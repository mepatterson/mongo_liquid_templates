h1. Mongo Liquid Templates

This is a very simplified starting point for using Liquid templates that are stored in a MongoDB collection.  Includes some
nice features such as auto-inclusion of all custom LiquidDrops in all templates, auto-inclusion of the _current_user_ in all
templates, and auto-inclusion of all instance variables defined in the controller method rendering the view.

h2. IMPORTANT

Note that with MongoMapper::Document objects, it seems that using the _liquid_methods :foo, :bar_ way of creating on-demand
LiquidDrops doesn't work properly with the plugin.  I haven't bothered to fix this, since I think that's a lame way of doing it
in the first place.

So you should do this instead in your models for any data you want available in a Liquid template:

<pre><code>
def to_liquid
  {'name' => name, 'biography' => biography, 'created_at' => created_at}
end
</pre></code>

Note that you *must* use string-based keys, not symbols!

... or, you can create custom LiquidDrops.

h2. Usage

Just install it as a plugin into your Rails project and make sure you have MongoDB and MongoMapper:

<pre><code>
./script/plugin install git://github.com/mepatterson/mongo_liquid_templates.git
</code></pre>

You need to install various gems, if you don't already have them:

<pre><code>
gem install liquid
gem install mongo
gem install mongo_ext
gem install mongomapper
</code></pre>

Probably need to require these gems in your _config/environment.rb_ file:

<pre><code>
config.gem "liquid"
config.gem "mongo"
config.gem "mongo_ext"
config.gem "mongomapper"
</code></pre>

Add a template to the Mongo collection:

<pre><code>
DynamicTemplate.create(:path => "person", :body => "<h2>{{ person.name }}</h2>\n<p>{{ person.biography }}</p>")
</code></pre>

* Every normal controller instance variables such as _@post_ or _@comments_ will be available as 'post' or 'comments' from inside the Liquid template. Your usual Rails helpers are also available as Liquid filters. 
* If you've defined a _current_user_ method, that will be automagically passed into any template or nested template.
* Any LiquidDrops defined in _app/liquid_drops_ will be available to ALL templates and nested templates.

Do this to render a liquid template from the database (example in HAML):
<pre><code>
= render_liquid('person')
</code></pre>

I borrowed a big chunk of code from _akitaonrails/dynamic_liquid_templates_, so this plugin can do all the same stuff in terms
of passing different namespaces, collections, etc.  Look at the docs for that plugin to see how this works.
http://github.com/akitaonrails/dynamic_liquid_templates

h2. To do

* ...

h2. Credits

M. E. Patterson (madraziel@gmail.com) - http://blog.digimonkey.com
